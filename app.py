"""
Flask Web Application for SFApps Presentation Generator
========================================================

–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PowerPoint –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π 
"Best Apps for {Industry} Available on AppExchange" –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –í–≤–æ–¥ —Ç–µ–º—ã –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ (industry)
- –í–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ AppExchange –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (5-20 —Å—Å—ã–ª–æ–∫)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–æ–≤, –Ω–∞–∑–≤–∞–Ω–∏–π –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–∞–π–¥–æ–≤
- –≠–∫—Å–ø–æ—Ä—Ç –≤ PPTX –∏ PDF —Ñ–æ—Ä–º–∞—Ç—ã
"""

import os
import tempfile
import uuid
from datetime import datetime
from io import BytesIO
import base64
from typing import Optional

from flask import Flask, render_template, request, flash, jsonify, send_file, redirect, url_for
from werkzeug.utils import secure_filename

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π
from sfapps_template_generator import (
    create_presentation_from_template, 
    AppMetadata
)

# –ò–º–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ Selenium –ø–∞—Ä—Å–µ—Ä–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)
try:
    from improved_selenium_parser import parse_appexchange_improved
    IMPROVED_SELENIUM_AVAILABLE = True
    print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π Selenium –ø–∞—Ä—Å–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    IMPROVED_SELENIUM_AVAILABLE = False
    print("‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–Ω—ã–π Selenium –ø–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ò–º–ø–æ—Ä—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ Selenium –ø–∞—Ä—Å–µ—Ä–∞ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
try:
    from simple_parser import parse_appexchange_simple
    SELENIUM_PARSER_AVAILABLE = True
    print("‚úÖ –ü—Ä–æ—Å—Ç–æ–π Selenium –ø–∞—Ä—Å–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    SELENIUM_PARSER_AVAILABLE = False
    print("‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ–π Selenium –ø–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ò–º–ø–æ—Ä—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
try:
    from final_parser import parse_appexchange_app
    FINAL_PARSER_AVAILABLE = True
    print("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    from sfapps_template_generator import fetch_app_metadata
    FINAL_PARSER_AVAILABLE = False
    print("‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

app = Flask(__name__)
app.secret_key = 'sfapps-presentation-generator-secret-key-2025'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'bmp'}
MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB max file size

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ uploads —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

def allowed_file(filename):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def fetch_app_metadata_with_fallback(url: str) -> Optional[AppMetadata]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã–π Selenium –ø–∞—Ä—Å–µ—Ä"""
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –£–ª—É—á—à–µ–Ω–Ω—ã–π Selenium –ø–∞—Ä—Å–µ—Ä (–¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü)
    if IMPROVED_SELENIUM_AVAILABLE:
        try:
            print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π Selenium –ø–∞—Ä—Å–µ—Ä –¥–ª—è {url}")
            result = parse_appexchange_improved(url)
            
            if result and result.get('success'):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç AppMetadata
                name = result.get('name', 'Unknown App')
                developer = result.get('developer', 'Unknown Developer')
                logo_bytes = b''
                logo_mime = 'image/png'
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å URL
                logo_url = result.get('logo_url')
                if logo_url:
                    try:
                        import requests
                        response = requests.get(logo_url, timeout=10)
                        if response.status_code == 200:
                            logo_bytes = response.content
                            logo_mime = response.headers.get('content-type', 'image/png')
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
                
                metadata = AppMetadata(
                    url=url,
                    name=name,
                    developer=developer,
                    logo_bytes=logo_bytes,
                    logo_mime=logo_mime
                )
                
                print(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π Selenium –ø–∞—Ä—Å–µ—Ä: {metadata.name} by {metadata.developer}")
                return metadata
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º Selenium –ø–∞—Ä—Å–µ—Ä–µ: {e}")
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ü—Ä–æ—Å—Ç–æ–π Selenium –ø–∞—Ä—Å–µ—Ä (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
    if SELENIUM_PARSER_AVAILABLE:
        try:
            print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π Selenium –ø–∞—Ä—Å–µ—Ä –¥–ª—è {url}")
            result = parse_appexchange_simple(url)
            
            if result and result.get('success'):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç AppMetadata
                name = result.get('name', 'Unknown App')
                developer = result.get('developer', 'Unknown Developer')
                logo_bytes = b''
                logo_mime = 'image/png'
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å URL
                logo_url = result.get('logo_url')
                if logo_url:
                    try:
                        import requests
                        response = requests.get(logo_url, timeout=10)
                        if response.status_code == 200:
                            logo_bytes = response.content
                            logo_mime = response.headers.get('content-type', 'image/png')
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
                
                metadata = AppMetadata(
                    url=url,
                    name=name,
                    developer=developer,
                    logo_bytes=logo_bytes,
                    logo_mime=logo_mime
                )
                
                print(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π Selenium –ø–∞—Ä—Å–µ—Ä: {metadata.name} by {metadata.developer}")
                return metadata
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º Selenium –ø–∞—Ä—Å–µ—Ä–µ: {e}")
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
    if FINAL_PARSER_AVAILABLE:
        try:
            print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è {url}")
            result = parse_appexchange_app(url)
            
            if result and result.get('name') != 'Unknown App':
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç AppMetadata
                name = result.get('name', 'Unknown App')
                developer = result.get('developer', 'Unknown Developer')
                logo_bytes = b''
                logo_mime = 'image/png'
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å URL
                image_url = result.get('image_url')
                if image_url:
                    try:
                        import requests
                        response = requests.get(image_url, timeout=10)
                        if response.status_code == 200:
                            logo_bytes = response.content
                            logo_mime = response.headers.get('content-type', 'image/png')
                    except:
                        pass
                
                metadata = AppMetadata(
                    url=url,
                    name=name,
                    developer=developer,
                    logo_bytes=logo_bytes,
                    logo_mime=logo_mime
                )
                
                print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: {metadata.name} by {metadata.developer}")
                return metadata
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ: {e}")
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤)
    try:
        print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è {url}")
        from sfapps_template_generator import fetch_app_metadata
        metadata = fetch_app_metadata(url)
        if metadata:
            print(f"‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: {metadata.name} by {metadata.developer}")
            return metadata
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é
    print(f"‚ùå –í—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {url}")
    metadata = AppMetadata(
        url=url,
        name="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
        developer="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
        logo_bytes=b'',
        logo_mime='image/png'
    )
    return metadata

def save_uploaded_file(file):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –ø—É—Ç–∏"""
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        unique_filename = f"{uuid.uuid4().hex}_{filename}"
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
        file.save(filepath)
        return filepath
    return None

def process_form_data(form_data, files):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    industry = form_data.get('industry', '').strip()
    final_url = form_data.get('final_url', '').strip()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
    app_links = form_data.getlist('app_links[]')
    app_names = form_data.getlist('app_names[]')
    app_developers = form_data.getlist('app_developers[]')
    app_logos = files.getlist('app_logos[]')
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö —Å—Å—ã–ª–æ–∫
    app_links = [link.strip() for link in app_links if link.strip()]
    
    if len(app_links) < 1:
        raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 1 —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    
    if len(app_links) > 10:
        raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫: 10")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
    overrides = {}
    for i, link in enumerate(app_links):
        override_data = {}
        
        # –ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if i < len(app_names) and app_names[i].strip():
            override_data['name'] = app_names[i].strip()
        
        # –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
        if i < len(app_developers) and app_developers[i].strip():
            override_data['developer'] = app_developers[i].strip()
        
        # –õ–æ–≥–æ—Ç–∏–ø
        if i < len(app_logos) and app_logos[i].filename:
            logo_path = save_uploaded_file(app_logos[i])
            if logo_path:
                override_data['logo_path'] = logo_path
        
        if override_data:
            overrides[link] = override_data
    
    return {
        'industry': industry,
        'app_links': app_links,
        'final_url': final_url,
        'overrides': overrides
    }

def create_preview_data(industry, app_links, final_url, overrides):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    preview_slides = []
    
    # –¢–∏—Ç—É–ª—å–Ω—ã–π —Å–ª–∞–π–¥
    preview_slides.append({
        'title': '–¢–∏—Ç—É–ª—å–Ω—ã–π —Å–ª–∞–π–¥',
        'content': f'<h4>Best Apps for {industry} Available on AppExchange</h4><p>Extreme Dynamic Forms<br>By Salesforce Labs</p>',
        'image': None
    })
    
    # –°–ª–∞–π–¥—ã —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
    for i, link in enumerate(app_links):
        slide_num = i + 1
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        if link in overrides:
            override = overrides[link]
            name = override.get('name', 'Loading...')
            developer = override.get('developer', 'Loading...')
            logo_path = override.get('logo_path')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –≤ base64 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            logo_data = None
            if logo_path and os.path.exists(logo_path):
                try:
                    with open(logo_path, 'rb') as f:
                        logo_bytes = f.read()
                        logo_base64 = base64.b64encode(logo_bytes).decode()
                        logo_data = f"data:image/png;base64,{logo_base64}"
                except Exception:
                    pass
        else:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            metadata = fetch_app_metadata_with_fallback(link)
            if metadata and metadata.name != "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ":
                name = metadata.name
                developer = metadata.developer
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –≤ base64
                if metadata.logo_bytes:
                    logo_base64 = base64.b64encode(metadata.logo_bytes).decode()
                    logo_data = f"data:image/png;base64,{logo_base64}"
                else:
                    logo_data = None
            else:
                name = '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤–≤–æ–¥'
                developer = '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤–≤–æ–¥'
                logo_data = None
        
        preview_slides.append({
            'title': f'–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ #{slide_num}',
            'content': f'<h5>{name}</h5><p>{developer}</p><small class="text-muted">{link}</small>',
            'image': logo_data
        })
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ª–∞–π–¥
    preview_slides.append({
        'title': '–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ª–∞–π–¥',
        'content': f'<h4>View Full List of Best Salesforce Apps for {industry}</h4><p>–°—Å—ã–ª–∫–∞: <a href="{final_url}" target="_blank">{final_url}</a></p>',
        'image': None
    })
    
    return {'slides': preview_slides}

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π"""
    return render_template('index.html')

@app.route('/generate', methods=['POST'])
def generate_presentation():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
        data = process_form_data(request.form, request.files)
        industry = data['industry']
        app_links = data['app_links']
        final_url = data['final_url']
        overrides = data['overrides']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        if request.form.get('preview') == 'true':
            preview_data = create_preview_data(industry, app_links, final_url, overrides)
            return jsonify({'success': True, 'preview': preview_data})
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        output_format = request.form.get('format', 'pptx')
        
        # –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É
        template_path = 'Copy of SFApps.info Best Apps Presentation Template.pptx'
        if not os.path.exists(template_path):
            flash('–®–∞–±–ª–æ–Ω –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('index'))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pptx') as tmp_pptx:
            output_pptx = tmp_pptx.name
        
        output_pdf = None
        if output_format == 'pdf':
            with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_pdf:
                output_pdf = tmp_pdf.name
        
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
            create_presentation_from_template(
                topic=industry,
                links=app_links,
                final_url=final_url,
                template_path=template_path,
                output_pptx=output_pptx,
                output_pdf=output_pdf,
                app_overrides=overrides
            )
            
            # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            if output_format == 'pdf' and output_pdf and os.path.exists(output_pdf):
                send_file_path = output_pdf
                mimetype = 'application/pdf'
                filename = f'Best_Apps_for_{industry}.pdf'
            else:
                send_file_path = output_pptx
                mimetype = 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
                filename = f'Best_Apps_for_{industry}.pptx'
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
            return send_file(
                send_file_path,
                as_attachment=True,
                download_name=filename,
                mimetype=mimetype
            )
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            try:
                if os.path.exists(output_pptx):
                    os.unlink(output_pptx)
                if output_pdf and os.path.exists(output_pdf):
                    os.unlink(output_pdf)
            except Exception:
                pass
            
            # –û—á–∏—Å—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ—Ç–∏–ø–æ–≤
            for override in overrides.values():
                logo_path = override.get('logo_path')
                if logo_path and os.path.exists(logo_path):
                    try:
                        os.unlink(logo_path)
                    except Exception:
                        pass
        
    except ValueError as e:
        if request.form.get('preview') == 'true':
            return jsonify({'success': False, 'error': str(e)})
        flash(str(e), 'error')
        return redirect(url_for('index'))
    
    except Exception as e:
        if request.form.get('preview') == 'true':
            return jsonify({'success': False, 'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}'})
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {str(e)}', 'error')
        return redirect(url_for('index'))

@app.errorhandler(413)
def too_large(e):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    flash('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 16MB', 'error')
    return redirect(url_for('index'))

@app.errorhandler(404)
def not_found(e):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–∫–∏"""
    return render_template('index.html'), 404

@app.errorhandler(500)
def internal_error(e):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    flash('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error')
    return render_template('index.html'), 500

if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ SFApps Presentation Generator...")
    print("üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
    print("üìÑ –®–∞–±–ª–æ–Ω:", "Copy of SFApps.info Best Apps Presentation Template.pptx")
    print("üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:5001")
    print("-" * 50)
    
    app.run(debug=True, host='0.0.0.0', port=5001)