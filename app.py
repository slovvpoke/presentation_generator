#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Flask Web Application for SFApps Presentation Generator
========================================================

–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PowerPoint –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π 
"Best Apps for {Industry} Available on AppExchange" –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –í–≤–æ–¥ —Ç–µ–º—ã –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ (industry)
- –í–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ AppExchange –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (1‚Äì10 —Å—Å—ã–ª–æ–∫)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–æ–≤, –Ω–∞–∑–≤–∞–Ω–∏–π –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–∞–π–¥–æ–≤
- –≠–∫—Å–ø–æ—Ä—Ç –≤ PPTX –∏ PDF —Ñ–æ—Ä–º–∞—Ç—ã
"""

import os
import tempfile
import uuid
import base64
import mimetypes
from typing import Optional, Dict, Any

import requests
from flask import Flask, render_template, request, flash, jsonify, send_file, redirect, url_for
from werkzeug.utils import secure_filename

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π
from sfapps_template_generator import (
    create_presentation_from_template, 
    AppMetadata
)

# –ò–º–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ Selenium –ø–∞—Ä—Å–µ—Ä–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)
try:
    from improved_selenium_parser import parse_appexchange_improved
    IMPROVED_SELENIUM_AVAILABLE = True
    print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π Selenium –ø–∞—Ä—Å–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    IMPROVED_SELENIUM_AVAILABLE = False
    print("‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–Ω—ã–π Selenium –ø–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ò–º–ø–æ—Ä—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ Selenium –ø–∞—Ä—Å–µ—Ä–∞ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
try:
    from simple_parser import parse_appexchange_simple
    SELENIUM_PARSER_AVAILABLE = True
    print("‚úÖ –ü—Ä–æ—Å—Ç–æ–π Selenium –ø–∞—Ä—Å–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    SELENIUM_PARSER_AVAILABLE = False
    print("‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ–π Selenium –ø–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ò–º–ø–æ—Ä—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
try:
    from final_parser import parse_appexchange_app
    FINAL_PARSER_AVAILABLE = True
    print("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    from sfapps_template_generator import fetch_app_metadata
    FINAL_PARSER_AVAILABLE = False
    print("‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

app = Flask(__name__)
app.secret_key = 'sfapps-presentation-generator-secret-key-2025'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'bmp', 'webp', 'svg'}  # —Ä–∞—Å—à–∏—Ä–∏–ª–∏
MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB max file size

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ uploads —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(UPLOAD_FOLDER, exist_ok=True)


# ---------- MIME helpers ----------

def sniff_mime(logo_bytes: bytes, url_hint: str = "", header_mime: str = "") -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MIME –¥–ª—è data:URI –∏/–∏–ª–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: header_mime ‚Üí –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ ‚Üí –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é ‚Üí image/png.
    """
    header_mime = (header_mime or "").lower().strip()
    if header_mime.startswith("image/"):
        return header_mime

    b = logo_bytes or b""
    h = b[:256]

    # SVG (–ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É)
    if b and (h.lstrip().startswith(b"<?xml") or b"<svg" in h.lower()):
        return "image/svg+xml"
    # PNG
    if h.startswith(b"\x89PNG\r\n\x1a\n"):
        return "image/png"
    # JPEG
    if h.startswith(b"\xff\xd8"):
        return "image/jpeg"
    # GIF
    if h.startswith(b"GIF87a") or h.startswith(b"GIF89a"):
        return "image/gif"
    # WebP
    if h[:4] == b"RIFF" and h[8:12] == b"WEBP":
        return "image/webp"

    # –ü–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é URL
    if url_hint:
        guess = mimetypes.guess_type(url_hint)[0]
        if guess:
            return guess

    return "image/png"


# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------

def allowed_file(filename):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤"""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


def save_uploaded_file(file):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –ø—É—Ç–∏"""
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        unique_filename = f"{uuid.uuid4().hex}_{filename}"
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
        file.save(filepath)
        return filepath
    return None


def fetch_app_metadata_with_fallback(url: str) -> Optional[AppMetadata]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî —É–ª—É—á—à–µ–Ω–Ω—ã–π Selenium –ø–∞—Ä—Å–µ—Ä (.listing-title h1 / p / .listing-logo img)"""
    # –û–±—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (WebP/SVG –∏ —Ç.–ø.)
    img_headers = {
        "User-Agent": "Mozilla/5.0",
        "Accept": "image/avif,image/webp,image/apng,image/*,*/*;q=0.8",
        "Referer": "https://appexchange.salesforce.com/",
    }

    def _download_logo(logo_url: str):
        try:
            r = requests.get(logo_url, timeout=10, headers=img_headers)
            if r.status_code == 200:
                logo_bytes = r.content
                logo_mime = sniff_mime(logo_bytes, url_hint=logo_url, header_mime=r.headers.get("content-type", ""))
                return logo_bytes, logo_mime
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
        return b"", "image/png"

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –£–ª—É—á—à–µ–Ω–Ω—ã–π Selenium –ø–∞—Ä—Å–µ—Ä
    if IMPROVED_SELENIUM_AVAILABLE:
        try:
            print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π Selenium –ø–∞—Ä—Å–µ—Ä –¥–ª—è {url}")
            result = parse_appexchange_improved(url)
            if result and result.get('success'):
                name = result.get('name', 'Unknown App')
                developer = result.get('developer', 'Unknown Developer')
                logo_bytes, logo_mime = b"", "image/png"
                logo_url = result.get('logo_url')
                if logo_url:
                    logo_bytes, logo_mime = _download_logo(logo_url)
                return AppMetadata(url=url, name=name, developer=developer, logo_bytes=logo_bytes, logo_mime=logo_mime)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º Selenium –ø–∞—Ä—Å–µ—Ä–µ: {e}")

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ü—Ä–æ—Å—Ç–æ–π Selenium –ø–∞—Ä—Å–µ—Ä
    if SELENIUM_PARSER_AVAILABLE:
        try:
            print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π Selenium –ø–∞—Ä—Å–µ—Ä –¥–ª—è {url}")
            result = parse_appexchange_simple(url)
            if result and result.get('success'):
                name = result.get('name', 'Unknown App')
                developer = result.get('developer', 'Unknown Developer')
                logo_bytes, logo_mime = b"", "image/png"
                logo_url = result.get('logo_url')
                if logo_url:
                    logo_bytes, logo_mime = _download_logo(logo_url)
                return AppMetadata(url=url, name=name, developer=developer, logo_bytes=logo_bytes, logo_mime=logo_mime)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º Selenium –ø–∞—Ä—Å–µ—Ä–µ: {e}")

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    if FINAL_PARSER_AVAILABLE:
        try:
            print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è {url}")
            result = parse_appexchange_app(url)
            if result and result.get('name') != 'Unknown App':
                name = result.get('name', 'Unknown App')
                developer = result.get('developer', 'Unknown Developer')
                logo_bytes, logo_mime = b"", "image/png"
                image_url = result.get('image_url')
                if image_url:
                    logo_bytes, logo_mime = _download_logo(image_url)
                return AppMetadata(url=url, name=name, developer=developer, logo_bytes=logo_bytes, logo_mime=logo_mime)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ: {e}")

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    try:
        print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è {url}")
        from sfapps_template_generator import fetch_app_metadata
        meta = fetch_app_metadata(url)
        if meta:
            return meta
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ: {e}")

    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {url}")
    return AppMetadata(
        url=url,
        name="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
        developer="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
        logo_bytes=b'',
        logo_mime='image/png'
    )


def process_form_data(form_data, files):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    industry = form_data.get('industry', '').strip()
    final_url = form_data.get('final_url', '').strip()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ (–º–∞—Å—Å–∏–≤—ã –∏–∑ —Ñ—Ä–æ–Ω—Ç–∞)
    app_links = [link.strip() for link in form_data.getlist('app_links[]') if link.strip()]
    app_names = form_data.getlist('app_names[]')
    app_developers = form_data.getlist('app_developers[]')
    app_logos = files.getlist('app_logos[]')

    if len(app_links) < 1:
        raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 1 —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    if len(app_links) > 10:
        raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫: 10")

    # –¢–æ–ª—å–∫–æ —Ä—É—á–Ω—ã–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    overrides: Dict[str, Dict[str, Any]] = {}
    for i, link in enumerate(app_links):
        od: Dict[str, Any] = {}
        if i < len(app_names) and app_names[i].strip():
            od['name'] = app_names[i].strip()
        if i < len(app_developers) and app_developers[i].strip():
            od['developer'] = app_developers[i].strip()
        if i < len(app_logos) and app_logos[i].filename:
            logo_path = save_uploaded_file(app_logos[i])
            if logo_path:
                od['logo_path'] = logo_path
                od['logo_mime'] = mimetypes.guess_type(logo_path)[0] or 'image/png'
        if od:
            overrides[link] = od

    return {
        'industry': industry,
        'app_links': app_links,
        'final_url': final_url,
        'overrides': overrides
    }


def resolve_app_data(link: str, overrides: Dict[str, Dict[str, Any]]) -> Dict[str, Any]:
    """
    –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –∏—Å—Ç–∏–Ω—ã: —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    1) –ë–µ—Ä—ë—Ç —Ä—É—á–Ω—ã–µ overrides (name/developer/logo_path);
    2) –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç ‚Äî –¥–æ—Ç—è–≥–∏–≤–∞–µ—Ç —á–µ—Ä–µ–∑ Selenium-–ø–∞—Ä—Å–µ—Ä (fetch_app_metadata_with_fallback);
    3) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –ø—Ä–∏–≥–æ–¥–Ω—ã–π –∏ –¥–ª—è –ø—Ä–µ–≤—å—é, –∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.
    """
    data: Dict[str, Any] = {}

    # 1) —Ä—É—á–Ω—ã–µ overrides
    if link in overrides:
        data.update(overrides[link])

    # 2) –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥, –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
    need_logo = ('logo_path' not in data and 'logo_bytes' not in data)
    if 'name' not in data or 'developer' not in data or need_logo:
        meta = fetch_app_metadata_with_fallback(link)
        if meta:
            if 'name' not in data and meta.name:
                data['name'] = meta.name
            if 'developer' not in data and meta.developer:
                data['developer'] = meta.developer
            if need_logo and getattr(meta, 'logo_bytes', b''):
                data['logo_bytes'] = meta.logo_bytes
                data['logo_mime'] = getattr(meta, 'logo_mime', None) or sniff_mime(meta.logo_bytes, url_hint=link)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–ª–∏ mime ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    if 'logo_path' in data and 'logo_mime' not in data:
        data['logo_mime'] = mimetypes.guess_type(data['logo_path'])[0] or 'image/png'

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π
    data.setdefault('name', '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤–≤–æ–¥')
    data.setdefault('developer', '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤–≤–æ–¥')

    return data


def create_preview_data(industry, app_links, final_url, overrides):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç resolve_app_data => –∫–∞–∫ –≤ –∏—Ç–æ–≥–æ–≤—ã—Ö —Å–ª–∞–π–¥–∞—Ö)"""
    preview_slides = []

    # –¢–∏—Ç—É–ª—å–Ω—ã–π —Å–ª–∞–π–¥ ‚Äî —á–∏—Å—Ç—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    preview_slides.append({
        'title': '–¢–∏—Ç—É–ª—å–Ω—ã–π —Å–ª–∞–π–¥',
        'content': f'<h4>Best Apps for {industry} Available on AppExchange</h4>',
        'image': None
    })

    # –°–ª–∞–π–¥—ã —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
    for i, link in enumerate(app_links):
        slide_num = i + 1
        resolved = resolve_app_data(link, overrides)

        # –ì–æ—Ç–æ–≤–∏–º –ª–æ–≥–æ –¥–ª—è –ø—Ä–µ–≤—å—é (base64) —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º MIME
        logo_data = None
        if 'logo_path' in resolved and os.path.exists(resolved['logo_path']):
            try:
                with open(resolved['logo_path'], 'rb') as f:
                    logo_bytes = f.read()
                mime = resolved.get('logo_mime') or mimetypes.guess_type(resolved['logo_path'])[0] or 'image/png'
                logo_data = f"data:{mime};base64,{base64.b64encode(logo_bytes).decode()}"
            except Exception:
                pass
        elif 'logo_bytes' in resolved and resolved['logo_bytes']:
            try:
                mime = resolved.get('logo_mime') or sniff_mime(resolved['logo_bytes'], url_hint=link)
                logo_data = f"data:{mime};base64,{base64.b64encode(resolved['logo_bytes']).decode()}"
            except Exception:
                pass

        preview_slides.append({
            'title': f'–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ #{slide_num}',
            'content': (
                f'<h5>{resolved["name"]}</h5>'
                f'<p>{resolved["developer"]}</p>'
                f'<small class="text-muted">{link}</small>'
            ),
            'image': logo_data
        })

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ª–∞–π–¥ ‚Äî —Ç–µ–º–∞ –∏ —Å—Å—ã–ª–∫–∞
    preview_slides.append({
        'title': '–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ª–∞–π–¥',
        'content': (
            f'<h4>Best Apps for {industry} Available on AppExchange</h4>'
            f'<p>–°—Å—ã–ª–∫–∞: <a href="{final_url}" target="_blank">{final_url}</a></p>'
        ),
        'image': None
    })

    return {'slides': preview_slides}


@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π"""
    return render_template('index.html')


@app.route('/generate', methods=['POST'])
def generate_presentation():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    try:
        data = process_form_data(request.form, request.files)
        industry = data['industry']
        app_links = data['app_links']
        final_url = data['final_url']
        overrides = data['overrides']

        # –ü—Ä–µ–≤—å—é?
        if request.form.get('preview') == 'true':
            preview_data = create_preview_data(industry, app_links, final_url, overrides)
            return jsonify({'success': True, 'preview': preview_data})

        # –ì–æ—Ç–æ–≤–∏–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ overrides –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–∞–∫–∏–µ –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–≤—å—é)
        resolved_overrides: Dict[str, Dict[str, Any]] = {}
        for link in app_links:
            resolved = resolve_app_data(link, overrides)
            ro: Dict[str, Any] = {
                'name': resolved['name'],
                'developer': resolved['developer']
            }
            if 'logo_path' in resolved:
                ro['logo_path'] = resolved['logo_path']
            if 'logo_bytes' in resolved:
                ro['logo_bytes'] = resolved['logo_bytes']
            if 'logo_mime' in resolved:
                ro['logo_mime'] = resolved['logo_mime']
            resolved_overrides[link] = ro

        # –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–∞
        output_format = request.form.get('format', 'pptx')

        # –®–∞–±–ª–æ–Ω
        template_path = 'Copy of SFApps.info Best Apps Presentation Template.pptx'
        if not os.path.exists(template_path):
            flash('–®–∞–±–ª–æ–Ω –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('index'))

        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pptx') as tmp_pptx:
            output_pptx = tmp_pptx.name
        output_pdf = None
        if output_format == 'pdf':
            with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_pdf:
                output_pdf = tmp_pdf.name

        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º —É–∂–µ –†–ê–ó–†–ï–®–Å–ù–ù–´–ï –¥–∞–Ω–Ω—ã–µ
            create_presentation_from_template(
                topic=industry,
                links=app_links,
                final_url=final_url,
                template_path=template_path,
                output_pptx=output_pptx,
                output_pdf=output_pdf,
                app_overrides=resolved_overrides
            )

            # –ß—Ç–æ –æ—Ç–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if output_format == 'pdf' and output_pdf and os.path.exists(output_pdf):
                send_file_path = output_pdf
                mimetype = 'application/pdf'
                filename = f'Best_Apps_for_{industry}.pdf'
            else:
                send_file_path = output_pptx
                mimetype = 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
                filename = f'Best_Apps_for_{industry}.pptx'

            return send_file(
                send_file_path,
                as_attachment=True,
                download_name=filename,
                mimetype=mimetype
            )

        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                if os.path.exists(output_pptx):
                    os.unlink(output_pptx)
                if output_pdf and os.path.exists(output_pdf):
                    os.unlink(output_pdf)
            except Exception:
                pass
            # –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ª–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã –¥–∞–ª—å—à–µ)
            for od in overrides.values():
                lp = od.get('logo_path')
                # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Ö ‚Äî —É–±–µ—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∏–∂–µ
                if lp and os.path.exists(lp):
                    try:
                        os.unlink(lp)
                    except Exception:
                        pass

    except ValueError as e:
        if request.form.get('preview') == 'true':
            return jsonify({'success': False, 'error': str(e)})
        flash(str(e), 'error')
        return redirect(url_for('index'))

    except Exception as e:
        if request.form.get('preview') == 'true':
            return jsonify({'success': False, 'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}'})
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {str(e)}', 'error')
        return redirect(url_for('index'))


@app.errorhandler(413)
def too_large(e):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    flash('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 16MB', 'error')
    return redirect(url_for('index'))

@app.errorhandler(404)
def not_found(e):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–∫–∏"""
    return render_template('index.html'), 404

@app.errorhandler(500)
def internal_error(e):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    flash('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error')
    return render_template('index.html'), 500


if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ SFApps Presentation Generator...")
    print("üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
    print("üìÑ –®–∞–±–ª–æ–Ω:", "Copy of SFApps.info Best Apps Presentation Template.pptx")
    print("üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:5001")
    print("-" * 50)
    app.run(debug=True, host='0.0.0.0', port=5001)
