#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä AppExchange
"""

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import time
import requests
from PIL import Image
from io import BytesIO

def parse_appexchange_simple(url):
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ - –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ
    """
    print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥: {url}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--disable-gpu')
    chrome_options.add_argument('--window-size=1920,1080')
    chrome_options.add_argument('--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36')
    
    driver = None
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        driver.get(url)
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è)
        print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        time.sleep(8)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É JavaScript
        
        # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
        app_name = None
        name_selectors = [
            'h1[data-aura-rendered-by]',  # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            'h1.appName',
            '.appName h1',
            'h1',
            '.listing-header h1',
            '.app-title',
            '[data-testid="app-name"]'
        ]
        
        for selector in name_selectors:
            try:
                element = driver.find_element(By.CSS_SELECTOR, selector)
                if element and element.text.strip():
                    app_name = element.text.strip()
                    print(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {app_name}")
                    break
            except:
                continue
        
        # –ò—â–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        developer = None
        dev_selectors = [
            '.appPublisher',
            '.publisher-name',
            '.developer-name',
            '[data-testid="publisher"]',
            'a[href*="publisher"]'
        ]
        
        for selector in dev_selectors:
            try:
                element = driver.find_element(By.CSS_SELECTOR, selector)
                if element and element.text.strip():
                    developer = element.text.strip()
                    print(f"‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω: {developer}")
                    break
            except:
                continue
        
        # –ò—â–µ–º –ª–æ–≥–æ—Ç–∏–ø
        logo_url = None
        logo_selectors = [
            '.appIcon img',
            '.app-logo img',
            '.listing-icon img',
            'img[alt*="logo"]',
            'img[alt*="icon"]'
        ]
        
        for selector in logo_selectors:
            try:
                element = driver.find_element(By.CSS_SELECTOR, selector)
                src = element.get_attribute('src')
                if src and ('http' in src or src.startswith('//')):
                    logo_url = src
                    if src.startswith('//'):
                        logo_url = 'https:' + src
                    print(f"‚úÖ –õ–æ–≥–æ—Ç–∏–ø –Ω–∞–π–¥–µ–Ω: {logo_url}")
                    break
            except:
                continue
        
        # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –∏–∑ title —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if not app_name:
            try:
                title = driver.title
                if title and 'AppExchange' in title:
                    # –£–±–∏—Ä–∞–µ–º "- AppExchange" –∏–∑ –∫–æ–Ω—Ü–∞
                    app_name = title.replace(' - AppExchange', '').strip()
                    print(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ title: {app_name}")
            except:
                pass
        
        # –ï—Å–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        if not developer:
            try:
                # –ò—â–µ–º —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ "by Company Name"
                page_text = driver.page_source
                import re
                match = re.search(r'by\s+([A-Za-z0-9\s,\.]+?)(?:\s|<|$)', page_text, re.IGNORECASE)
                if match:
                    developer = match.group(1).strip()
                    print(f"‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞: {developer}")
            except:
                pass
        
        return {
            'name': app_name or 'Unknown App',
            'developer': developer or 'Unknown Developer', 
            'logo_url': logo_url,
            'success': bool(app_name)
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return {
            'name': 'Parsing Error',
            'developer': 'Unknown',
            'logo_url': None,
            'success': False,
            'error': str(e)
        }
    finally:
        if driver:
            driver.quit()

def download_logo(logo_url, target_size=(100, 100)):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–æ—Ç–∏–ø
    """
    if not logo_url:
        return None
        
    try:
        response = requests.get(logo_url, headers={
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)'
        }, timeout=10)
        
        if response.status_code == 200:
            image = Image.open(BytesIO(response.content))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode in ('RGBA', 'LA', 'P'):
                background = Image.new('RGB', image.size, (255, 255, 255))
                if image.mode == 'P':
                    image = image.convert('RGBA')
                background.paste(image, mask=image.split()[-1] if image.mode == 'RGBA' else None)
                image = background
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
            image.thumbnail(target_size, Image.Resampling.LANCZOS)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
            output = BytesIO()
            image.save(output, format='PNG')
            output.seek(0)
            return output
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ {logo_url}: {e}")
        return None

# –¢–µ—Å—Ç
if __name__ == "__main__":
    test_url = "https://appexchange.salesforce.com/appxListingDetail?listingId=a0N3A00000B5XxXUAV"
    result = parse_appexchange_simple(test_url)
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")