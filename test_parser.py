#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ AppExchange —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
"""

import requests
from sfapps_template_generator import _extract_from_html, fetch_app_metadata

def test_extraction_with_url(url):
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ URL"""
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL: {url}")
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ HTML
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        
        print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (—Ä–∞–∑–º–µ—Ä: {len(response.text):,} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        name, developer, logo_url = _extract_from_html(response.text)
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:")
        print(f"   üì± –ù–∞–∑–≤–∞–Ω–∏–µ: {name or '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'}")
        print(f"   üë• –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {developer or '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'}")
        print(f"   üñºÔ∏è  –õ–æ–≥–æ—Ç–∏–ø URL: {logo_url or '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'}")
        
        # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ fetch_app_metadata
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fetch_app_metadata...")
        metadata = fetch_app_metadata(url)
        
        if metadata:
            print("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:")
            print(f"   üì± –ù–∞–∑–≤–∞–Ω–∏–µ: {metadata.name}")
            print(f"   üë• –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {metadata.developer}")
            print(f"   üñºÔ∏è  –õ–æ–≥–æ—Ç–∏–ø: {len(metadata.logo_bytes):,} –±–∞–π—Ç")
            print(f"   üìÑ MIME: {metadata.logo_mime}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 70)
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ AppExchange")
    print("=" * 70)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ URL
    test_urls = [
        'https://appexchange.salesforce.com/appxListingDetail?listingId=a0N3000000B4cKBEAZ',  # DocuSign
        'https://appexchange.salesforce.com/appxListingDetail?listingId=a0N3u00000MSfukEAD',  # Conga Composer
        'https://appexchange.salesforce.com/appxListingDetail?listingId=a0N3A00000EFpq5UAD',  # LoanBeam
    ]
    
    successful_tests = 0
    total_tests = len(test_urls)
    
    for i, url in enumerate(test_urls, 1):
        print(f"\n{'='*50}")
        print(f"üìã –¢–µ—Å—Ç {i}/{total_tests}")
        print(f"{'='*50}")
        
        if test_extraction_with_url(url):
            successful_tests += 1
        
        print("\n" + "-" * 50)
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{'='*70}")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {successful_tests}/{total_tests} —É—Å–ø–µ—à–Ω–æ")
    
    if successful_tests == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    elif successful_tests > 0:
        print("‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç. –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏.")
    else:
        print("‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏ —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
    
    return successful_tests == total_tests

if __name__ == '__main__':
    main()