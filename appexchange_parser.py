#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AppExchange –ø–∞—Ä—Å–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Shadow DOM (2025)

–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü AppExchange.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Selenium —Å JavaScript –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Shadow DOM —ç–ª–µ–º–µ–Ω—Ç–∞–º.

–ò–∑–≤–ª–µ–∫–∞–µ—Ç:
- name:      .listing-title h1
- developer: .listing-title p  
- image:     .listing-logo img
"""

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from webdriver_manager.chrome import ChromeDriverManager
import requests
from PIL import Image
from io import BytesIO
import re
import time
import json
import hashlib
import os

# –ü—Ä–æ—Å—Ç–æ–µ —Ñ–∞–π–ª–æ–≤–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
CACHE_DIR = "/tmp/appexchange_cache"
CACHE_EXPIRY_HOURS = 24

def _get_cache_path(url: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞ –¥–ª—è URL."""
    if not os.path.exists(CACHE_DIR):
        os.makedirs(CACHE_DIR)
    url_hash = hashlib.md5(url.encode()).hexdigest()
    return os.path.join(CACHE_DIR, f"cache_{url_hash}.json")

def _is_cache_valid(cache_path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –∫—ç—à (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)."""
    if not os.path.exists(cache_path):
        return False
    age_hours = (time.time() - os.path.getmtime(cache_path)) / 3600
    return age_hours < CACHE_EXPIRY_HOURS

def _load_from_cache(url: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –æ–Ω–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã."""
    cache_path = _get_cache_path(url)
    if _is_cache_valid(cache_path):
        try:
            with open(cache_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                print(f"üíæ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞: {url}")
                return data
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞: {e}")
    return None

def _save_to_cache(url: str, data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à."""
    try:
        cache_path = _get_cache_path(url)
        with open(cache_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à: {url}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à: {e}")


# ---------- JS-—Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –≤—Å–µ shadowRoot ----------
_JS_QUERY_SELECTOR_DEEP = r"""
const selector = arguments[0];

function qsd(sel, root) {
  root = root || document;

  // –ü—Ä—è–º–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–≥–æ root
  if (root.querySelector) {
    const direct = root.querySelector(sel);
    if (direct) return direct;
  }

  // –û–±–æ–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ ¬´–ø—Ä–æ–∫–æ–ª–æ—Ç—å¬ª –∏—Ö shadowRoot
  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);
  let node = walker.currentNode;
  while (node) {
    if (node.shadowRoot) {
      const found = qsd(sel, node.shadowRoot);
      if (found) return found;
    }
    node = walker.nextNode();
  }
  return null;
}
return qsd(selector, document);
"""

def find_element_deep(driver, selector: str, timeout: int = 3):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä—É, –ø—Ä–æ—Ö–æ–¥—è —á–µ—Ä–µ–∑ –≤—Å–µ shadowRoot.
    –ë—Ä–æ—Å–∞–µ—Ç TimeoutException, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
    """
    return WebDriverWait(driver, timeout).until(
        lambda d: d.execute_script(_JS_QUERY_SELECTOR_DEEP, selector),
        message=f"–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç (–≤–∫–ª—é—á–∞—è shadow DOM): {selector}"
    )


def parse_appexchange_improved(url: str, driver=None, reuse_driver=False):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–∏—Å—Ç–∏–Ω–≥–∞ AppExchange.
    –î–æ—Å—Ç–∞—ë—Ç: name (.listing-title h1), developer (.listing-title p), logo_url (.listing-logo img).
    
    Args:
        url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã AppExchange
        driver: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π WebDriver (–¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
        reuse_driver: –ï—Å–ª–∏ True, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –¥—Ä–∞–π–≤–µ—Ä –≤ –∫–æ–Ω—Ü–µ
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    cached_result = _load_from_cache(url)
    if cached_result:
        return cached_result
    
    start_time = time.time()
    print(f"üîç –°—Ç–∞—Ä—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {url}")

    driver_was_provided = driver is not None
    
    if not driver_was_provided:
        driver_start = time.time()
        # ---- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome ----
        chrome_options = Options()
        chrome_options.add_argument("--headless=new")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--disable-images")  # –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        chrome_options.add_argument("--window-size=1280,720")  # –ú–µ–Ω—å—à–µ –æ–∫–Ω–æ = –±—ã—Å—Ç—Ä–µ–µ
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) "
                                    "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option("useAutomationExtension", False)

    try:
        if not driver_was_provided:
            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=chrome_options)
            # –ú–∏–Ω–∏-–º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ webdriver-—Ñ–ª–∞–≥–∞
            driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            driver_init_time = time.time() - driver_start
            print(f"‚è±Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: {driver_init_time:.2f}c")

        # –ü–µ—Ä–µ—Ö–æ–¥
        nav_start = time.time()
        driver.get(url)
        nav_time = time.time() - nav_start
        print(f"‚è±Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {nav_time:.2f}c")

        # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –Ω–∞ –ø–µ—Ä–≤–∏—á–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é SPA/–≤–µ–±-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        sleep_start = time.time()
        time.sleep(0.2)  # –ë—ã–ª–æ 0.5, —Å—Ç–∞–ª–æ 0.2
        sleep_time = time.time() - sleep_start
        print(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {sleep_time:.2f}c")

        # ===== NAME (.listing-title h1) =====
        name_start = time.time()
        app_name = None
        print("üîé –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É .listing-title h1 ...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä (–±—ã—Å—Ç—Ä–µ–µ)
        try:
            name_el = driver.find_element("css selector", ".listing-title h1")
            app_name = (name_el.text or "").strip()
            print(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ (–æ–±—ã—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä): {app_name}")
        except:
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Shadow DOM
            try:
                name_el = find_element_deep(driver, ".listing-title h1", timeout=3)
                app_name = (name_el.text or "").strip()
                print(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ (shadow DOM): {app_name}")
            except TimeoutException:
                print("‚ö†Ô∏è –ù–µ –Ω–∞—à–ª–∏ .listing-title h1 ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º <title> –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                # fallback –∏–∑ <title>
                title = (driver.title or "").strip()
                if title:
                    app_name = re.sub(r"\s*\|\s*(Salesforce\s+)?AppExchange.*$", "", title, flags=re.IGNORECASE).strip()
                    if app_name:
                        print(f"‚ÑπÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ <title>: {app_name}")

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ö–≤–æ—Å—Ç–æ–≤ ¬´| AppExchange¬ª
        if app_name:
            app_name = re.sub(r"\s*\|\s*(Salesforce\s+)?AppExchange.*$", "", app_name, flags=re.IGNORECASE).strip()
        
        name_time = time.time() - name_start
        print(f"‚è±Ô∏è –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è: {name_time:.2f}c")

        # ===== DEVELOPER (.listing-title p) =====
        dev_start = time.time()
        developer = None
        print("üîé –ò—â–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É .listing-title p ...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        try:
            dev_el = driver.find_element("css selector", ".listing-title p")
            developer = (dev_el.text or "").strip()
            print(f"‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (–æ–±—ã—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä): {developer}")
        except:
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Shadow DOM
            try:
                dev_el = find_element_deep(driver, ".listing-title p", timeout=2)
                developer = (dev_el.text or "").strip()
                print(f"‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (shadow DOM): {developer}")
            except TimeoutException:
                print("‚ö†Ô∏è –ù–µ –Ω–∞—à–ª–∏ .listing-title p ‚Äî –æ—Å—Ç–∞–≤–∏–º Unknown Developer")
        
        dev_time = time.time() - dev_start
        print(f"‚è±Ô∏è –ü–æ–∏—Å–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: {dev_time:.2f}c")

        # ===== LOGO (.listing-logo img) =====
        logo_start = time.time()
        logo_url = None
        print("üîé –ò—â–µ–º –ª–æ–≥–æ—Ç–∏–ø –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É .listing-logo img ...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        try:
            img_el = driver.find_element("css selector", ".listing-logo img")
            src = (img_el.get_attribute("src") or "").strip()
            if src:
                logo_url = ("https:" + src) if src.startswith("//") else src
                print(f"‚úÖ –õ–æ–≥–æ—Ç–∏–ø (–æ–±—ã—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä): {logo_url}")
        except:
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Shadow DOM
            try:
                img_el = find_element_deep(driver, ".listing-logo img", timeout=2)
                src = (img_el.get_attribute("src") or "").strip()
                if src:
                    logo_url = ("https:" + src) if src.startswith("//") else src
                    print(f"‚úÖ –õ–æ–≥–æ—Ç–∏–ø (shadow DOM): {logo_url}")
            except TimeoutException:
                print("‚ö†Ô∏è –ù–µ –Ω–∞—à–ª–∏ .listing-logo img ‚Äî –ø—Ä–æ–±—É–µ–º meta og:image")
                try:
                    og_img = driver.find_element("css selector", 'meta[property="og:image"]')
                    logo_url = og_img.get_attribute("content")
                    if logo_url:
                        print(f"‚ÑπÔ∏è –õ–æ–≥–æ—Ç–∏–ø –∏–∑ og:image: {logo_url}")
                except Exception:
                    print("‚ùå og:image —Ç–æ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        logo_time = time.time() - logo_start
        print(f"‚è±Ô∏è –ü–æ–∏—Å–∫ –ª–æ–≥–æ—Ç–∏–ø–∞: {logo_time:.2f}c")

        result = {
            "name": app_name or "Unknown App",
            "developer": developer or "Unknown Developer",
            "logo_url": logo_url,
            "success": bool(app_name)
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if result["success"]:
            _save_to_cache(url, result)

        total_time = time.time() - start_time
        print(f"‚è±Ô∏è –û–ë–©–ï–ï –í–†–ï–ú–Ø –ü–ê–†–°–ò–ù–ì–ê: {total_time:.2f}c")
        print("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ:    {result['name']}")
        print(f"   –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {result['developer']}")
        print(f"   –õ–æ–≥–æ—Ç–∏–ø:     {result['logo_url']}")
        return result

    except Exception as e:
        total_time = time.time() - start_time
        print(f"‚è±Ô∏è –í–†–ï–ú–Ø –î–û –û–®–ò–ë–ö–ò: {total_time:.2f}c")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        result = {
            "name": "Parsing Error",
            "developer": "Unknown",
            "logo_url": None,
            "success": False,
            "error": str(e),
        }
        return result
    finally:
        if driver and not driver_was_provided and not reuse_driver:
            driver.quit()


def parse_multiple_appexchange_urls(urls: list):
    """
    –ë—ã—Å—Ç—Ä—ã–π –ø–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö URL —Å –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞.
    –í 3-5 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ —á–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥–æ–≥–æ URL –æ—Ç–¥–µ–ª—å–Ω–æ.
    
    Args:
        urls: –°–ø–∏—Å–æ–∫ URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å {url: result_data}
    """
    if not urls:
        return {}
        
    batch_start = time.time()
    print(f"üöÄ –ë—ã—Å—Ç—Ä—ã–π –ø–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ {len(urls)} URL...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    driver_init_start = time.time()
    chrome_options = Options()
    chrome_options.add_argument("--headless=new")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--disable-images")  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    chrome_options.add_argument("--window-size=1280,720")  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
    chrome_options.add_argument("--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) "
                                "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option("useAutomationExtension", False)
    
    results = {}
    driver = None
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –æ–¥–∏–Ω —Ä–∞–∑
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        driver_init_time = time.time() - driver_init_start
        print(f"‚è±Ô∏è –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–†–ê–ô–í–ï–†–ê: {driver_init_time:.2f}c")
        
        # –ü–∞—Ä—Å–∏–º –≤—Å–µ URL –ø–æ–¥—Ä—è–¥
        for i, url in enumerate(urls, 1):
            url_start = time.time()
            print(f"üìç [{i}/{len(urls)}] –ü–∞—Ä—Å–∏–Ω–≥: {url}")
            result = parse_appexchange_improved(url, driver=driver, reuse_driver=True)
            results[url] = result
            url_time = time.time() - url_start
            print(f"‚è±Ô∏è URL #{i} –≤—Ä–µ–º—è: {url_time:.2f}c")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
    finally:
        if driver:
            close_start = time.time()
            driver.quit()
            close_time = time.time() - close_start
            print(f"‚è±Ô∏è –ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞: {close_time:.2f}c")
            
    batch_total = time.time() - batch_start
    print(f"‚è±Ô∏è –û–ë–©–ï–ï –í–†–ï–ú–Ø –ü–ê–ö–ï–¢–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê: {batch_total:.2f}c")
    print(f"‚úÖ –ü–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(results)}/{len(urls)} —É—Å–ø–µ—à–Ω–æ")
    return results


def download_logo(logo_url: str, target_size=(100, 100)):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –ª–æ–≥–æ—Ç–∏–ø –∏ –ø—Ä–∏–≤–æ–¥it –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É –º–∞–∫—Å–∏–º—É–º—É —Ä–∞–∑–º–µ—Ä–∞ (thumbnail).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç PIL.Image –∏–ª–∏ None.
    """
    if not logo_url:
        return None
    try:
        resp = requests.get(logo_url, timeout=10)
        if resp.status_code == 200:
            img = Image.open(BytesIO(resp.content))
            img.thumbnail(target_size)
            return img
    except Exception:
        pass
    return None


# ===== –¢–µ—Å—Ç =====
if __name__ == "__main__":
    test_url = "https://appexchange.salesforce.com/appxListingDetail?listingId=01dbaf61-02e0-4bc8-a8db-2ddbf30719ed"
    print("=== –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–£–°–ö SELENIUM –ü–ê–†–°–ï–†–ê ===")
    result = parse_appexchange_improved(test_url)

    print("\nüéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ:    {result['name']}")
    print(f"–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {result['developer']}")
    print(f"–õ–æ–≥–æ—Ç–∏–ø:     {result['logo_url']}")
    print(f"–£—Å–ø–µ—Ö:       {result['success']}")
