#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Selenium –ø–∞—Ä—Å–µ—Ä AppExchange (2025) —Å —Ç–æ—á–µ—á–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ –∏ –ø—Ä–æ—Ö–æ–¥–æ–º —á–µ—Ä–µ–∑ shadow DOM.

–ò—â–µ–º:
- name:      .listing-title h1
- developer: .listing-title p
- image:     .listing-logo img
"""

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from webdriver_manager.chrome import ChromeDriverManager
import requests
from PIL import Image
from io import BytesIO
import re
import time


# ---------- JS-—Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –≤—Å–µ shadowRoot ----------
_JS_QUERY_SELECTOR_DEEP = r"""
const selector = arguments[0];

function qsd(sel, root) {
  root = root || document;

  // –ü—Ä—è–º–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–≥–æ root
  if (root.querySelector) {
    const direct = root.querySelector(sel);
    if (direct) return direct;
  }

  // –û–±–æ–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ ¬´–ø—Ä–æ–∫–æ–ª–æ—Ç—å¬ª –∏—Ö shadowRoot
  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);
  let node = walker.currentNode;
  while (node) {
    if (node.shadowRoot) {
      const found = qsd(sel, node.shadowRoot);
      if (found) return found;
    }
    node = walker.nextNode();
  }
  return null;
}
return qsd(selector, document);
"""

def find_element_deep(driver, selector: str, timeout: int = 25):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä—É, –ø—Ä–æ—Ö–æ–¥—è —á–µ—Ä–µ–∑ –≤—Å–µ shadowRoot.
    –ë—Ä–æ—Å–∞–µ—Ç TimeoutException, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
    """
    return WebDriverWait(driver, timeout).until(
        lambda d: d.execute_script(_JS_QUERY_SELECTOR_DEEP, selector),
        message=f"–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç (–≤–∫–ª—é—á–∞—è shadow DOM): {selector}"
    )


def parse_appexchange_improved(url: str):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–∏—Å—Ç–∏–Ω–≥–∞ AppExchange.
    –î–æ—Å—Ç–∞—ë—Ç: name (.listing-title h1), developer (.listing-title p), logo_url (.listing-logo img).
    """
    print(f"üîç –°—Ç–∞—Ä—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {url}")

    # ---- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome ----
    chrome_options = Options()
    chrome_options.add_argument("--headless=new")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) "
                                "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option("useAutomationExtension", False)

    driver = None
    try:
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)

        # –ú–∏–Ω–∏-–º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ webdriver-—Ñ–ª–∞–≥–∞
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

        # –ü–µ—Ä–µ—Ö–æ–¥
        driver.get(url)

        # –ù–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä –Ω–∞ –ø–µ—Ä–≤–∏—á–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é SPA/–≤–µ–±-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        time.sleep(2)

        # ===== NAME (.listing-title h1) =====
        app_name = None
        print("üîé –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É .listing-title h1 (—Å —É—á—ë—Ç–æ–º shadow DOM)...")
        try:
            name_el = find_element_deep(driver, ".listing-title h1", timeout=30)
            app_name = (name_el.text or "").strip()
            print(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {app_name}")
        except TimeoutException:
            print("‚ö†Ô∏è –ù–µ –Ω–∞—à–ª–∏ .listing-title h1 ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º <title> –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
            # fallback –∏–∑ <title>
            title = (driver.title or "").strip()
            if title:
                app_name = re.sub(r"\s*\|\s*(Salesforce\s+)?AppExchange.*$", "", title, flags=re.IGNORECASE).strip()
                if app_name:
                    print(f"‚ÑπÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ <title>: {app_name}")

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ö–≤–æ—Å—Ç–æ–≤ ¬´| AppExchange¬ª
        if app_name:
            app_name = re.sub(r"\s*\|\s*(Salesforce\s+)?AppExchange.*$", "", app_name, flags=re.IGNORECASE).strip()

        # ===== DEVELOPER (.listing-title p) =====
        developer = None
        print("üîé –ò—â–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É .listing-title p ...")
        try:
            dev_el = find_element_deep(driver, ".listing-title p", timeout=15)
            developer = (dev_el.text or "").strip()
            print(f"‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (–∫–∞–∫ –µ—Å—Ç—å): {developer}")
        except TimeoutException:
            print("‚ö†Ô∏è –ù–µ –Ω–∞—à–ª–∏ .listing-title p ‚Äî –æ—Å—Ç–∞–≤–∏–º Unknown Developer")

        # ===== LOGO (.listing-logo img) =====
        logo_url = None
        print("üîé –ò—â–µ–º –ª–æ–≥–æ—Ç–∏–ø –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É .listing-logo img ...")
        try:
            img_el = find_element_deep(driver, ".listing-logo img", timeout=15)
            src = (img_el.get_attribute("src") or "").strip()
            if src:
                logo_url = ("https:" + src) if src.startswith("//") else src
                print(f"‚úÖ –õ–æ–≥–æ—Ç–∏–ø: {logo_url}")
        except TimeoutException:
            print("‚ö†Ô∏è –ù–µ –Ω–∞—à–ª–∏ .listing-logo img ‚Äî –ø—Ä–æ–±—É–µ–º meta og:image")
            try:
                og_img = driver.find_element("css selector", 'meta[property="og:image"]')
                logo_url = og_img.get_attribute("content")
                if logo_url:
                    print(f"‚ÑπÔ∏è –õ–æ–≥–æ—Ç–∏–ø –∏–∑ og:image: {logo_url}")
            except Exception:
                pass

        result = {
            "name": app_name or "Unknown App",
            "developer": developer or "Unknown Developer",
            "logo_url": logo_url,
            "success": bool(app_name)
        }

        print("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ:    {result['name']}")
        print(f"   –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {result['developer']}")
        print(f"   –õ–æ–≥–æ—Ç–∏–ø:     {result['logo_url']}")
        return result

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return {
            "name": "Parsing Error",
            "developer": "Unknown",
            "logo_url": None,
            "success": False,
            "error": str(e),
        }
    finally:
        if driver:
            driver.quit()


def download_logo(logo_url: str, target_size=(100, 100)):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –ª–æ–≥–æ—Ç–∏–ø –∏ –ø—Ä–∏–≤–æ–¥it –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É –º–∞–∫—Å–∏–º—É–º—É —Ä–∞–∑–º–µ—Ä–∞ (thumbnail).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç PIL.Image –∏–ª–∏ None.
    """
    if not logo_url:
        return None
    try:
        resp = requests.get(logo_url, timeout=10)
        if resp.status_code == 200:
            img = Image.open(BytesIO(resp.content))
            img.thumbnail(target_size)
            return img
    except Exception:
        pass
    return None


# ===== –¢–µ—Å—Ç =====
if __name__ == "__main__":
    test_url = "https://appexchange.salesforce.com/appxListingDetail?listingId=01dbaf61-02e0-4bc8-a8db-2ddbf30719ed"
    print("=== –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–£–°–ö SELENIUM –ü–ê–†–°–ï–†–ê ===")
    result = parse_appexchange_improved(test_url)

    print("\nüéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ:    {result['name']}")
    print(f"–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {result['developer']}")
    print(f"–õ–æ–≥–æ—Ç–∏–ø:     {result['logo_url']}")
    print(f"–£—Å–ø–µ—Ö:       {result['success']}")
